#!/usr/bin/env groovy
def propagateParamsToEnv() {
  for (param in params) {
    if (env."${param.key}" == null) {
      env."${param.key}" = param.value
    }
  }
}

def withBuildResult(Closure body) {
  def previousBuildResult = currentBuild.previousBuild?.result
  try {
    body()
    currentBuild.result = 'SUCCESS'
  } catch(InterruptedException e) {
    currentBuild.result = 'ABORTED'
    throw e
  } catch(e) {
    currentBuild.result = 'FAILURE'
    throw e
  } finally {
    sendBuildNotification(currentBuild.result, previousBuildResult)
  }
}

/*
* sendBuildNotification sends a notification to slack if the build
* has recovered from a failure (i.e. had failed previously)
* or failed.
* See https://github.com/jenkinsci/jenkins/blob/jenkins-2.121.1/core/src/main/java/hudson/model/Result.java
* for the list of possible values for currentBuild.result.
*/
def sendBuildNotification(String currentBuildResult, String previousBuildResult) {
  currentBuildResult = currentBuildResult ?: "SUCCESS"
  previousBuildResult = previousBuildResult ?: "SUCCESS"

  def color = "warning"
  def message = "${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
  if (currentBuildResult == "SUCCESS") {
    color = "good"
  }
  def shouldNotify = currentBuildResult != "STARTED" &&
                     currentBuildResult != "SUCCESS" &&
                     currentBuildResult != "ABORTED" ||
                    (currentBuildResult == "SUCCESS" && previousBuildResult != "SUCCESS")
  if (shouldNotify) {
    slackSend(color: color, message: message)
  }
}

properties([
  disableConcurrentBuilds(),
  // Schedule a daily build between 6:00am and 6:30am UTC (10:00pm-10:30pm PST)
  pipelineTriggers([cron('H(0-30) 06 * * 1-5')]),
  parameters([
    choice(choices: ["run", "skip"].join("\n"),
           defaultValue: 'run',
           description: 'Run or skip robotest system wide tests.',
           name: 'RUN_ROBOTEST'),
    choice(choices: ["true", "false"].join("\n"),
           defaultValue: 'true',
           description: 'Destroy all VMs on success.',
           name: 'DESTROY_ON_SUCCESS'),
    choice(choices: ["true", "false"].join("\n"),
           defaultValue: 'true',
           description: 'Destroy all VMs on failure.',
           name: 'DESTROY_ON_FAILURE'),
    choice(choices: ["true", "false"].join("\n"),
           defaultValue: 'true',
           description: 'Abort all tests upon first failure.',
           name: 'FAIL_FAST'),
    choice(choices: ["gce"].join("\n"),
           defaultValue: 'gce',
           description: 'Cloud provider to deploy to.',
           name: 'DEPLOY_TO'),
    string(name: 'PARALLEL_TESTS',
           defaultValue: '4',
           description: 'Number of parallel tests to run.'),
    string(name: 'REPEAT_TESTS',
           defaultValue: '1',
           description: 'How many times to repeat each test.'),
    string(name: 'ROBOTEST_VERSION',
           defaultValue: 'dima',
           description: 'Robotest tag to use.'),
    choice(choices: ["true", "false"].join("\n"),
           defaultValue: 'true',
           description: 'Whether to use preemptible VMs.',
           name: 'GCE_PREEMPTIBLE'),
    choice(choices: ["custom-4-8192", "custom-8-8192"].join("\n"),
           defaultValue: 'custom-4-8192',
           description: 'VM type to use.',
           name: 'GCE_VM'),
  ]),
])

timestamps {
  withBuildResult {
    node {
      stage('checkout') {
        checkout scm
        sh "git submodule update --init --recursive"
        sh "sudo git clean -ffdx" // supply -f flag twice to force-remove untracked dirs with .git subdirs (e.g. submodules)
      }
      stage('params') {
        echo "${params}"
        propagateParamsToEnv()
      }
      stage('clean') {
        sh "make -C e clean"
      }
      stage('build-gravity') {
        withCredentials([
        [$class: 'SSHUserPrivateKeyBinding', credentialsId: '08267d86-0b3a-4101-841e-0036bf780b11', keyFileVariable: 'GITHUB_SSH_KEY'],
        [
          $class: 'UsernamePasswordMultiBinding',
          credentialsId: 'jenkins-aws-s3',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY',
        ],
        ]) {
          sh 'make -C e production telekube opscenter'
        }
      }
    }
    throttle(['robotest']) {
      node {
        stage('build-and-test') {
          parallel (
          build : {
            withCredentials([
            [$class: 'SSHUserPrivateKeyBinding', credentialsId: '08267d86-0b3a-4101-841e-0036bf780b11', keyFileVariable: 'GITHUB_SSH_KEY']]) {
              sh 'make test && make -C e test'
            }
          },
          robotest : {
            if (params.RUN_ROBOTEST == 'run') {
              withCredentials([
                  [
                    $class: 'UsernamePasswordMultiBinding',
                    credentialsId: 'jenkins-aws-s3',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY',
                  ],
                  [$class: 'StringBinding', credentialsId: 'GET_GRAVITATIONAL_IO_APIKEY', variable: 'GET_GRAVITATIONAL_IO_APIKEY'],
                  [$class: 'FileBinding', credentialsId:'ROBOTEST_LOG_GOOGLE_APPLICATION_CREDENTIALS', variable: 'GOOGLE_APPLICATION_CREDENTIALS'],
                  [$class: 'FileBinding', credentialsId:'OPS_SSH_KEY', variable: 'SSH_KEY'],
                  [$class: 'FileBinding', credentialsId:'OPS_SSH_PUB', variable: 'SSH_PUB'],
                  ]) {
                    sh """
                    make -C e robotest-run-nightly \
                      AWS_KEYPAIR=ops \
                      AWS_REGION=us-east-1 \
                      ROBOTEST_VERSION=$ROBOTEST_VERSION"""
              }
            } else {
              echo 'skipped system tests'
            }
          } )
        }
      }
    }
  }
}
